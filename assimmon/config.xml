<?xml version='1.0' encoding='UTF-8'?>
<matrix-project plugin="matrix-project@1.4">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VERSION</name>
          <description></description>
          <defaultValue>tip</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>FOLDER</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>master</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>true</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <axes>
    <hudson.matrix.LabelAxis>
      <name>label</name>
      <values>
        <string>mycon</string>
        <string>worker64-ub1204</string>
        <string>worker64-ub1310</string>
        <string>worker64-ub1404</string>
      </values>
    </hudson.matrix.LabelAxis>
  </axes>
  <builders>
    <hudson.tasks.Shell>
      <command>#no automatic upgrades (dpkg-reconfigure unattended-upgrades)
#sudo visudo
#install vmtools
#install jdk
#create snapshot &apos;clean&apos;

echo this is build number ${BUILD_NUMBER}
cat /etc/issue
uname -a
whoami
sudo apt-get update
sudo apt-get install -y python-flask doxygen valgrind libpcap-dev mercurial python-pip cmake build-essential pkg-config libglib2.0-dev resource-agents python-gi python-netaddr

if [ $VERSION = &quot;tip&quot; ]; then
  hg clone &apos;http://hg.linux-ha.org/%7Cexperimental/assimilation/&apos;
else
  wget http://hg.linux-ha.org/assimilation/archive/$VERSION.tar.gz
  mkdir assimilation
  tar xvfz $VERSION.tar.gz --directory assimilation --strip-components 1
fi

cd assimilation
hg id
cd ..

#removed tornado
#added flask

if [ &quot;`lsb_release -rs`&quot; = &quot;13.10&quot; ]; then
  sudo pip install ctypesgen --pre
else
  sudo pip install ctypesgen
fi

sudo pip install testify flask getent
sudo pip install py2neo==1.6.4

pip freeze

wget -O - http://debian.neo4j.org/neotechnology.gpg.key | sudo apt-key add -
# Create an Apt sources.list file

echo &apos;deb http://debian.neo4j.org/repo stable/&apos; | sudo tee /etc/apt/sources.list.d/neo4j.list
# Find out about the files in our repository
sudo apt-get update -qq
# Install Neo4j, community edition
sudo apt-get install -qq neo4j
# start neo4j server, available at http://localhost:7474 of the target machine
#sudo service neo4j-service stop
#sudo service neo4j-service start

#cd assimilation
#hg summary
#cd ..

pwd
wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.1.tar.gz
tar xvfz libsodium-1.0.1.tar.gz
cd libsodium*
./configure
make &amp;&amp; make check &amp;&amp; sudo make install
sudo ldconfig
cd ..

mkdir root_of_binary_tree
cd root_of_binary_tree
cmake ../assimilation
make
sudo cpack
sudo dpkg -i *.deb
md5sum *.deb

#stop nanoprobe and cma so that we can test
sudo /etc/init.d/nanoprobe stop
sudo /etc/init.d/cma stop

sudo assimcli genkeys</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>cd assimilation/cma
testify -v tests
</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>assimilation/discovery_agents/netconfig
cd root_of_binary_tree/testcode
sudo ../../assimilation/testcode/grind.sh</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>root_of_binary_tree/testcode/pinger ::1</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>ssh jctong@jenkinsci &quot;mkdir -p /tmp/${BUILD_NUMBER}/${NODE_NAME}&quot;
scp ${WORKSPACE}/root_of_binary_tree/*.deb jctong@jenkinsci:/tmp/$BUILD_NUMBER/${NODE_NAME}</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.postbuildtask.PostbuildTask plugin="postbuild-task@1.8">
      <tasks>
        <hudson.plugins.postbuildtask.TaskProperties>
          <logTexts>
            <hudson.plugins.postbuildtask.LogProperties>
              <logText>Started by</logText>
              <operator>AND</operator>
            </hudson.plugins.postbuildtask.LogProperties>
          </logTexts>
          <EscalateStatus>false</EscalateStatus>
          <RunIfJobSuccessful>false</RunIfJobSuccessful>
          <script>echo ${NODE_NAME}&#xd;
echo ${BUILD_NUMBER}&#xd;
echo ${BUILD_ID}&#xd;
ssh jctong@jenkinsci /home/jctong/scripts/jenkins-console-output-forwarder-to-gist/new.pl ${NODE_NAME} ${BUILD_NUMBER} ${JOB_NAME}&#xd;
ssh jctong@jenkinsci /home/jctong/scripts/twitter_notifier/notifier.pl ${NODE_NAME} ${BUILD_NUMBER} ${JOB_NAME}&#xd;
ssh jctong@jenkinsci /home/jctong/scripts/dropbox_pkg_uploader/upload.pl /tmp/${BUILD_NUMBER}/${NODE_NAME} ${FOLDER} ${NODE_NAME} ${BUILD_NUMBER}&#xd;
</script>
        </hudson.plugins.postbuildtask.TaskProperties>
      </tasks>
    </hudson.plugins.postbuildtask.PostbuildTask>
  </publishers>
  <buildWrappers>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.14.1">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>25</timeoutMinutes>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.AbortOperation/>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <EnvInjectBuildWrapper plugin="envinject@1.89">
      <info>
        <propertiesContent>BROKENDNS=1</propertiesContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
  <executionStrategy class="hudson.matrix.DefaultMatrixExecutionStrategyImpl">
    <runSequentially>false</runSequentially>
  </executionStrategy>
</matrix-project>